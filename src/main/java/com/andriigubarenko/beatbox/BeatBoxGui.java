/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.andriigubarenko.beatbox;

import java.awt.Label;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Андрей
 */
public class BeatBoxGui extends javax.swing.JFrame {

    /**
     * Creates new form BeatBoxGui
     */
    int nextNum;
    String[] instrumentNames = {"Bass Drum", "Closed Hi-Hat",
        "Open Hi-Hat", "Acoustic Snare", "Crash Cymbal", "Hand Clap",
        "High Tom", "Hi Bongo", "Maracas", "Whistle", "Low Conga",
        "Cowbell", "Vibraslap", "Low-mid Tom", "High Agogo",
        "Open Hi Conga"};

    public BeatBoxGui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        close = new javax.swing.JLabel();
        minimize = new javax.swing.JLabel();
        loadIt = new javax.swing.JButton();
        saveIt = new javax.swing.JButton();
        sendIt = new javax.swing.JButton();
        downTempo = new javax.swing.JButton();
        upTempo = new javax.swing.JButton();
        stop = new javax.swing.JButton();
        start = new javax.swing.JButton();
        userMessage = new javax.swing.JTextField();
        nameBox = new javax.swing.JPanel();
        theList = new java.awt.ScrollPane();
        incomingList = new java.awt.List();
        grid = new javax.swing.JPanel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(800, 430));
        setMinimumSize(new java.awt.Dimension(800, 430));
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        close.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                closeMouseReleased(evt);
            }
        });
        getContentPane().add(close, new org.netbeans.lib.awtextra.AbsoluteConstraints(788, 5, 50, 20));

        minimize.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        minimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                minimizeMouseReleased(evt);
            }
        });
        getContentPane().add(minimize, new org.netbeans.lib.awtextra.AbsoluteConstraints(732, 6, 50, 20));

        loadIt.setText("Load File");
        loadIt.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        loadIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadItActionPerformed(evt);
            }
        });
        getContentPane().add(loadIt, new org.netbeans.lib.awtextra.AbsoluteConstraints(577, 201, 110, 25));

        saveIt.setText("Save It");
        saveIt.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItActionPerformed(evt);
            }
        });
        getContentPane().add(saveIt, new org.netbeans.lib.awtextra.AbsoluteConstraints(577, 174, 110, 25));

        sendIt.setText("Send It");
        sendIt.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sendIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendItActionPerformed(evt);
            }
        });
        getContentPane().add(sendIt, new org.netbeans.lib.awtextra.AbsoluteConstraints(577, 147, 110, 25));

        downTempo.setText("Temp Down");
        downTempo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        downTempo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downTempoActionPerformed(evt);
            }
        });
        getContentPane().add(downTempo, new org.netbeans.lib.awtextra.AbsoluteConstraints(577, 121, 110, 25));

        upTempo.setText("Temp Up");
        upTempo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        upTempo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upTempoActionPerformed(evt);
            }
        });
        getContentPane().add(upTempo, new org.netbeans.lib.awtextra.AbsoluteConstraints(577, 94, 110, 25));

        stop.setText("Stop");
        stop.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });
        getContentPane().add(stop, new org.netbeans.lib.awtextra.AbsoluteConstraints(577, 67, 110, 25));

        start.setText("Start");
        start.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });
        getContentPane().add(start, new org.netbeans.lib.awtextra.AbsoluteConstraints(577, 40, 110, 25));
        getContentPane().add(userMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(576, 234, 255, 50));

        for (int i = 0; i < 16; i++) {
            nameBox.add(new Label(instrumentNames[i]));
        }
        nameBox.setBackground(new java.awt.Color(52, 73, 94));
        getContentPane().add(nameBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 36, 100, 375));

        theList.add(incomingList);

        getContentPane().add(theList, new org.netbeans.lib.awtextra.AbsoluteConstraints(576, 292, 255, 120));

        grid.setBackground(new java.awt.Color(52, 73, 94));
        grid.setForeground(new java.awt.Color(52, 73, 94));
        grid.setToolTipText("");
        grid.setMaximumSize(new java.awt.Dimension(400, 388));
        grid.setMinimumSize(new java.awt.Dimension(400, 388));
        grid.setLayout(new java.awt.GridLayout(16, 16, 2, 1));
        getContentPane().add(grid, new org.netbeans.lib.awtextra.AbsoluteConstraints(165, 34, 400, 386));
        for (int i = 0; i < 256; i++) {
            JCheckBox c = new JCheckBox();
            c.setBackground(new java.awt.Color(52, 73, 94));
            c.setSelected(false);
            BeatBoxUserSide.checkboxList.add(c);
            grid.add(c);
        }

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/andriigubarenko/images/Gui_view.png"))); // NOI18N
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 850, 430));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void closeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseReleased
        System.exit(0);
    }//GEN-LAST:event_closeMouseReleased

    private void minimizeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeMouseReleased
        this.setState(BeatBoxGui.ICONIFIED);
    }//GEN-LAST:event_minimizeMouseReleased

    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        BeatBoxUserSide.buildTrackAndStart();
    }//GEN-LAST:event_startActionPerformed

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        BeatBoxUserSide.sequencer.stop();
    }//GEN-LAST:event_stopActionPerformed

    private void upTempoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upTempoActionPerformed
        float tempoFactor = BeatBoxUserSide.sequencer.getTempoFactor();
        BeatBoxUserSide.sequencer.setTempoFactor((float) (tempoFactor * 1.03));
    }//GEN-LAST:event_upTempoActionPerformed

    private void downTempoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downTempoActionPerformed
        float tempoFactor = BeatBoxUserSide.sequencer.getTempoFactor();
        BeatBoxUserSide.sequencer.setTempoFactor((float) (tempoFactor * .97));
    }//GEN-LAST:event_downTempoActionPerformed

    private void sendItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendItActionPerformed
        // make an arraylist of just the STATE of the checkboxes
        boolean[] checkboxState = new boolean[256];

        for (int i = 0; i < 256; i++) {
            JCheckBox check = (JCheckBox) BeatBoxUserSide.checkboxList.get(i);
            if (check.isSelected()) {
                checkboxState[i] = true;
            }
        }

        try {
            BeatBoxUserSide.out.writeObject(BeatBoxUserSide.userName + nextNum++ + ": " + BeatBoxUserSide.userMessage.getText());
            BeatBoxUserSide.out.writeObject(checkboxState);
        } catch (IOException ex) {
            ex.printStackTrace();
            System.out.println("sorry dude. Could not send it to the server");
        }
    }//GEN-LAST:event_sendItActionPerformed

    private void saveItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItActionPerformed
        JFileChooser fileSave = new JFileChooser();
        fileSave.showSaveDialog(this);
        saveFile(fileSave.getSelectedFile());
    }

    private void saveFile(File file) {
        boolean[] checkboxState = new boolean[256];
        for (int i = 0; i < 256; i++) {
            JCheckBox check = (JCheckBox) BeatBoxUserSide.checkboxList.get(i);
            if (check.isSelected()) {
                checkboxState[i] = true;
            }
        }
        try {
            FileOutputStream fileStream = new FileOutputStream(file);
            ObjectOutputStream os = new ObjectOutputStream(fileStream);
            os.writeObject(checkboxState);
            os.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_saveItActionPerformed

    private void loadItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadItActionPerformed
        JFileChooser fileOpen = new JFileChooser();
        fileOpen.showOpenDialog(this);
        loadFile(fileOpen.getSelectedFile());
    }

    private void loadFile(File file) {
        boolean[] checkboxState = null;
        try {
            FileInputStream fileIn = new FileInputStream(file);
            ObjectInputStream is = new ObjectInputStream(fileIn);
            checkboxState = (boolean[]) is.readObject();
            is.close();
        } catch (IOException | ClassNotFoundException ex) {
            ex.printStackTrace();
        }
        for (int i = 0; i < 256; i++) {
            JCheckBox check = (JCheckBox) (BeatBoxUserSide.checkboxList.get(i));
            if (checkboxState[i] != false) {
                check.setSelected(true);
            } else {
                check.setSelected(false);
            }
        }
        BeatBoxUserSide.sequencer.stop();
        BeatBoxUserSide.buildTrackAndStart();
    }//GEN-LAST:event_loadItActionPerformed

    /**
     * @param args the command line arguments
     */
    /*public static void main(String args[]) {
        /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
 /* try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BeatBoxGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BeatBoxGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BeatBoxGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BeatBoxGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
 /* java.awt.EventQueue.invokeLater(() -> {
            new BeatBoxGui().setVisible(true);
        });
    }*/
    public class MyListSelectionListener implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent le) {
            if (!le.getValueIsAdjusting()) {
                String selected = (String) incomingList.getSelectedItem();
                if (selected != null) {
                    boolean[] selectedState = (boolean[]) BeatBoxUserSide.otherSeqsMap.get(selected);
                    BeatBoxUserSide.changeSequence(selectedState);
                    BeatBoxUserSide.sequencer.stop();
                    BeatBoxUserSide.buildTrackAndStart();
                }
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JLabel close;
    private javax.swing.JButton downTempo;
    private javax.swing.JPanel grid;
    private java.awt.List incomingList;
    private javax.swing.JButton loadIt;
    private javax.swing.JLabel minimize;
    private javax.swing.JPanel nameBox;
    private javax.swing.JButton saveIt;
    private javax.swing.JButton sendIt;
    private javax.swing.JButton start;
    private javax.swing.JButton stop;
    private java.awt.ScrollPane theList;
    private javax.swing.JButton upTempo;
    private javax.swing.JTextField userMessage;
    // End of variables declaration//GEN-END:variables
}
